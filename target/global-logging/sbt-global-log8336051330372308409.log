[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\MBR\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\MBR\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.7 (Oracle Corporation Java 1.8.0_391)
[debug] Load.defaultLoad until apply took 69.8248ms
[debug]           Load.loadUnit: plugins took 138.6966ms
[debug]           Load.loadUnit: defsScala took 0.2879ms
[debug] [Loading] Scanning directory C:\Users\MBR\IdeaProjects\LibraryManagementSystem\project
[debug]             Load.loadUnit: mkEval took 6.5308ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\MBR\IdeaProjects\LibraryManagementSystem\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 11.7831 ms
[info] loading settings for project librarymanagementsystem-build from idea.sbt ...
[debug]               Load.resolveProject(librarymanagementsystem-build) took 37.7275ms
[debug]             Load.loadTransitive: finalizeProject(Project(id librarymanagementsystem-build, base: C:\Users\MBR\IdeaProjects\LibraryManagementSystem\project, plugins: List(<none>))) took 56.9215ms
[debug] [Loading] Done in C:\Users\MBR\IdeaProjects\LibraryManagementSystem\project, returning: (librarymanagementsystem-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1993.1506ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.9348ms
[debug]         Load.loadUnit(file:/C:/Users/MBR/IdeaProjects/LibraryManagementSystem/project/, ...) took 2142.7226ms
[debug]       Load.apply: load took 2228.2091ms
[debug]       Load.apply: resolveProjects took 4.1785ms
[debug]       Load.apply: finalTransforms took 40.1902ms
[debug]       Load.apply: config.delegates took 4.8851ms
[debug]       Load.apply: Def.make(settings)... took 303.412ms
[debug]       Load.apply: structureIndex took 99.648ms
[debug]       Load.apply: mkStreams took 1.3897ms
[info] loading project definition from C:\Users\MBR\IdeaProjects\LibraryManagementSystem\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 4129.4021ms
[debug]     Load.loadUnit: defsScala took 0.0026ms
[debug] [Loading] Scanning directory C:\Users\MBR\IdeaProjects\LibraryManagementSystem
[debug]       Load.loadUnit: mkEval took 0.1973ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\MBR\IdeaProjects\LibraryManagementSystem, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.6081 ms
[info] loading settings for project librarymanagementsystem from build.sbt ...
[debug]         Load.resolveProject(librarymanagementsystem) took 20.1635ms
[debug]       Load.loadTransitive: finalizeProject(Project(id librarymanagementsystem, base: C:\Users\MBR\IdeaProjects\LibraryManagementSystem, plugins: List(<none>))) took 22.6538ms
[debug] [Loading] Done in C:\Users\MBR\IdeaProjects\LibraryManagementSystem, returning: (librarymanagementsystem)
[debug]     Load.loadUnit: loadedProjectsRaw took 805.4068ms
[debug]     Load.loadUnit: cleanEvalClasses took 7.3683ms
[debug]   Load.loadUnit(file:/C:/Users/MBR/IdeaProjects/LibraryManagementSystem/, ...) took 4943.2768ms
[debug] Load.apply: load took 4957.3967ms
[debug] Load.apply: resolveProjects took 0.375ms
[debug] Load.apply: finalTransforms took 19.8638ms
[debug] Load.apply: config.delegates took 0.2417ms
[debug] Load.apply: Def.make(settings)... took 57.4394ms
[debug] Load.apply: structureIndex took 21.1913ms
[debug] Load.apply: mkStreams took 0.0027ms
[info] set current project to librarymanagementsystem (in build file:/C:/Users/MBR/IdeaProjects/LibraryManagementSystem/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58525 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58525, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to librarymanagementsystem (in build file:/C:/Users/MBR/IdeaProjects/LibraryManagementSystem/)
[debug] > Exec(idea-shell, None, None)
